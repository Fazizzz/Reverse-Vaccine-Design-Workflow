setwd("C:/Users/Fazi-/Desktop/Course Work/Immunoinformatics Course/Epitope Predictions/B-Cell")
# Load required libraries
library(ggplot2)
library(readr)
# Read the DiscoTope data
disco <- read_csv("DiscoTope scores.csv")
# Read the DiscoTope data
disco <- read_csv("DiscoTope scores.csv")
# Read the DiscoTope data
disco <- read_csv("DiscoTope scores.csv")
View(disco)
# Plotting
ggplot(disco, aes(x = residue_id, y = discotope_score)) +
geom_line(color = "black", size = 1) +
geom_hline(yintercept = -7.7, color = "red", linetype = "dashed", size = 0.8) +
geom_ribbon(aes(ymin = ifelse(discotope_score > -7.7, -7.7, NA),
ymax = ifelse(discotope_score > -7.7, discotope_score, NA)),
fill = "green", alpha = 0.3) +
geom_ribbon(aes(ymin = ifelse(discotope_score <= -7.7, discotope_score, NA),
ymax = ifelse(discotope_score <= -7.7, -7.7, NA)),
fill = "pink", alpha = 0.3) +
labs(title = "DiscoTope Prediction",
x = "Residue Position",
y = "DiscoTope Score",
caption = "Red dashed line = Threshold (-7.7); Green = Predicted epitope") +
theme_minimal(base_size = 14) +
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Plotting
figure <- ggplot(disco, aes(x = residue_id, y = discotope_score)) +
geom_line(color = "black", size = 1) +
geom_hline(yintercept = -7.7, color = "red", linetype = "dashed", size = 0.8) +
geom_ribbon(aes(ymin = ifelse(discotope_score > -7.7, -7.7, NA),
ymax = ifelse(discotope_score > -7.7, discotope_score, NA)),
fill = "green", alpha = 0.3) +
geom_ribbon(aes(ymin = ifelse(discotope_score <= -7.7, discotope_score, NA),
ymax = ifelse(discotope_score <= -7.7, -7.7, NA)),
fill = "pink", alpha = 0.3) +
labs(title = "DiscoTope Prediction",
x = "Residue Position",
y = "DiscoTope Score",
caption = "Red dashed line = Threshold (-7.7); Green = Predicted epitope") +
theme_minimal(base_size = 14) +
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
plot.title = element_text(hjust = 0.5, face = "bold")
)
ggsave("Conformational B-cell Epitopes predicted per Residue figure.png",plot = figure,dpi = 600)
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
A = "A", R = "R", N = "N", D = "D", C = "C",
Q = "Q", E = "E", G = "G", H = "H", I = "I",
L = "L", K = "K", M = "M", F = "F", P = "P",
S = "S", T = "T", W = "W", Y = "Y", V = "V"
)
View(disco)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
library(dplyr)
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
A = "A", R = "R", N = "N", D = "D", C = "C",
Q = "Q", E = "E", G = "G", H = "H", I = "I",
L = "L", K = "K", M = "M", F = "F", P = "P",
S = "S", T = "T", W = "W", Y = "Y", V = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1],
Sequence = paste(AA, collapse = "")
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
A = "A", R = "R", N = "N", D = "D", C = "C",
Q = "Q", E = "E", G = "G", H = "H", I = "I",
L = "L", K = "K", M = "M", F = "F", P = "P",
S = "S", T = "T", W = "W", Y = "Y", V = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1],
Sequence = paste(AA, collapse = "")
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Optional: write to CSV
write_csv(top_epitopes, "Top5_DiscoTope_Epitopes_withSequence.csv")
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
Ala = "A", Arg = "R", Asn = "N", Asp = "D", Cys = "C",
Gln = "Q", Glu = "E", Gly = "G", His = "H", Ile = "I",
Leu = "L", Lys = "K", Met = "M", Phe = "F", Pro = "P",
Ser = "S", Thr = "T", Trp = "W", Tyr = "Y", Val = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Sequence = paste(AA, collapse = ""),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1]
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
Ala = "A", Arg = "R", Asn = "N", Asp = "D", Cys = "C",
Gln = "Q", Glu = "E", Gly = "G", His = "H", Ile = "I",
Leu = "L", Lys = "K", Met = "M", Phe = "F", Pro = "P",
Ser = "S", Thr = "T", Trp = "W", Tyr = "Y", Val = "V"
)
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
Ala = "A", Arg = "R", Asn = "N", Asp = "D", Cys = "C",
Gln = "Q", Glu = "E", Gly = "G", His = "H", Ile = "I",
Leu = "L", Lys = "K", Met = "M", Phe = "F", Pro = "P",
Ser = "S", Thr = "T", Trp = "W", Tyr = "Y", Val = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Sequence = paste(AA, collapse = ""),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1]
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Read the DiscoTope data
disco <- read_csv("DiscoTope scores.csv")
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
Ala = "A", Arg = "R", Asn = "N", Asp = "D", Cys = "C",
Gln = "Q", Glu = "E", Gly = "G", His = "H", Ile = "I",
Leu = "L", Lys = "K", Met = "M", Phe = "F", Pro = "P",
Ser = "S", Thr = "T", Trp = "W", Tyr = "Y", Val = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Sequence = paste(AA, collapse = ""),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1]
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Optional: write to CSV
write_csv(top_epitopes, "Top5_DiscoTope_Epitopes_withSequence.csv")
# Optional: write to CSV
write_csv(top_epitopes, "Top5_DiscoTope_Epitopes_withSequence.csv")
# Define domain boundaries
get_domain <- function(pos) {
if (pos >= 1   & pos <= 259) return("Domain 1")
if (pos >= 260 & pos <= 489) return("Domain 2")
if (pos >= 490 & pos <= 594) return("Domain 3")
if (pos >= 595 & pos <= 735) return("Domain 4")
return("Outside Known Domains")
}
# Amino acid 3-letter to 1-letter mapping
aa_map <- c(
ALA = "A", ARG = "R", ASN = "N", ASP = "D", CYS = "C",
GLN = "Q", GLU = "E", GLY = "G", HIS = "H", ILE = "I",
LEU = "L", LYS = "K", MET = "M", PHE = "F", PRO = "P",
SER = "S", THR = "T", TRP = "W", TYR = "Y", VAL = "V"
)
# Annotate domain and sequence
disco <- disco %>%
mutate(
Domain = sapply(residue_id, get_domain),
AA = aa_map[residue_name]
)
# Filter positive predictions
positive <- disco %>%
filter(discotope_score > -7.7) %>%
arrange(residue_id) %>%
mutate(Group = cumsum(c(TRUE, diff(residue_id) != 1)))
# Summarize epitope regions with sequence
top_epitopes <- positive %>%
group_by(Group) %>%
summarise(
Start = min(residue_id),
End = max(residue_id),
Length = n(),
Sequence = paste(AA, collapse = ""),
Avg_Score = round(mean(discotope_score), 3),
Domain = names(sort(table(Domain), decreasing = TRUE))[1]
) %>%
arrange(desc(Avg_Score)) %>%
slice_head(n = 5)
# View result
print(top_epitopes)
# Optional: write to CSV
write_csv(top_epitopes, "Top5_DiscoTope_Epitopes_withSequence.csv")
setwd("C:/Users/Fazi-/Desktop/Course Work/Immunoinformatics Course/Epitope Predictions/T-cell and MHC Class 2")
# Load required packages
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
install.packages("tidyr")
install.packages("reshape2")
install.packages("pheatmap")
# Load required packages
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
library(reshape2)
library(pheatmap)
# Load input data
iedb <- read_csv("MHCII_IEDB_Epitope_Summary_Table.csv")
tepi <- read_csv("TepiTool_Epitope_Summary.csv")
# Merge by common peptide sequence
consensus <- inner_join(iedb, tepi, by = "peptide", suffix = c("_IEDB", "_TepiTool"))
View(consensus)
# Calculate consensus score
consensus <- consensus %>%
mutate(Consensus_Score = (Avg_Rank + Avg_Percentile) / 2) %>%
arrange(Consensus_Score)
View(consensus)
# Save consensus table
write_csv(consensus, "Consensus_MHCII_Epitopes_TepiTool_IEDB.csv")
# Select top 5 epitopes
top5 <- consensus %>% slice_min(order_by = Consensus_Score, n = 5)
View(top5)
View(consensus)
# Save top 5 summary
write_csv(top5, "Top5_Consensus_MHCII_Epitopes.csv")
# Prepare heatmap data (normalize rank scores: 100 - value)
heatmap_data <- top5 %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Avg_Rank, Avg_Percentile) %>%
mutate(
Adj_Rank = 100 - Avg_Rank,
Adj_Percentile = 100 - Avg_Percentile
) %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Adj_Rank, Adj_Percentile) %>%
rename(
"IEDB Alleles" = Num_Alleles_IEDB,
"TepiTool Alleles" = Num_Alleles_TepiTool,
"IEDB Rank (inverted)" = Adj_Rank,
"TepiTool Percentile (inverted)" = Adj_Percentile
) %>%
column_to_rownames("peptide")
# Select top 5 epitopes
top5 <- consensus %>% slice_min(order_by = Consensus_Score, n = 5)
# Save top 5 summary
write_csv(top5, "Top5_Consensus_MHCII_Epitopes.csv")
# Prepare heatmap data (normalize rank scores: 100 - value)
heatmap_data <- top5 %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Avg_Rank, Avg_Percentile) %>%
mutate(
Adj_Rank = 100 - Avg_Rank,
Adj_Percentile = 100 - Avg_Percentile
) %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Adj_Rank, Adj_Percentile) %>%
rename(
"IEDB Alleles" = Num_Alleles_IEDB,
"TepiTool Alleles" = Num_Alleles_TepiTool,
"IEDB Rank (inverted)" = Adj_Rank,
"TepiTool Percentile (inverted)" = Adj_Percentile
) %>%
column_to_rownames("peptide")
library(tibble)
# Prepare heatmap data (normalize rank scores: 100 - value)
heatmap_data <- top5 %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Avg_Rank, Avg_Percentile) %>%
mutate(
Adj_Rank = 100 - Avg_Rank,
Adj_Percentile = 100 - Avg_Percentile
) %>%
select(peptide, Num_Alleles_IEDB, Num_Alleles_TepiTool, Adj_Rank, Adj_Percentile) %>%
rename(
"IEDB Alleles" = Num_Alleles_IEDB,
"TepiTool Alleles" = Num_Alleles_TepiTool,
"IEDB Rank (inverted)" = Adj_Rank,
"TepiTool Percentile (inverted)" = Adj_Percentile
) %>%
column_to_rownames("peptide")
# Plot heatmap
pheatmap(
mat = as.matrix(heatmap_data),
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
main = "Top 5 Consensus MHC-II Epitopes (IEDB + TepiTool)",
color = colorRampPalette(c("white", "blue"))(50),
fontsize_number = 10,
angle_col = 45
)
# Plot heatmap
pheatmap(
mat = as.matrix(heatmap_data),
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
main = "Top 5 Consensus MHC-II Epitopes (IEDB + TepiTool)",
color = colorRampPalette(c("white", "Yellow"))(50),
fontsize_number = 10,
angle_col = 45
)
# Plot heatmap
fig <- pheatmap(
mat = as.matrix(heatmap_data),
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
main = "Top 5 Consensus MHC-II Epitopes (IEDB + TepiTool)",
color = colorRampPalette(c("white", "#33FFFF"))(50),
fontsize_number = 10,
angle_col = 45
)
ggsave("Top5_Consensus_MHCII_Epitope_Heatmap.png", plot = fig, dpi=300)
